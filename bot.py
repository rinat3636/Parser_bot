import os
import requests
import random
import time
import telebot
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.keys import Keys
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
MARKETPLACES = {
    "Wildberries": "https://www.wildberries.ru/catalog/0/search.aspx?search=",
    "Ozon": "https://www.ozon.ru/search/?text=",
    "Yandex Market": "https://market.yandex.ru/search?text="
}

# –°–ø–∏—Å–æ–∫ user-agents –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36"
]

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö
product_database = {}

# –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π —á–µ–ª–æ–≤–µ–∫–∞
def human_like_typing(driver, search_box, text):
    for char in text:
        search_box.send_keys(char)
        time.sleep(random.uniform(0.1, 0.4))  # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –¥–µ–π—Å—Ç–≤–∏–π —á–µ–ª–æ–≤–µ–∫–∞
def monitor_prices(query, chat_id):
    global product_database

    for marketplace, base_url in MARKETPLACES.items():
        url = base_url + query
        options = Options()
        options.add_argument(f"user-agent={random.choice(USER_AGENTS)}")
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)

        try:
            driver.get(base_url)  # –ó–∞—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            time.sleep(random.uniform(3, 6))  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑
            for _ in range(random.randint(1, 3)):
                driver.execute_script("window.scrollBy(0, 300);")
                time.sleep(random.uniform(1, 3))

            # –ò–º–∏—Ç–∞—Ü–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∏—Å–∫
            search_box = driver.find_element("name", "search")  # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞)
            search_box.click()
            human_like_typing(driver, search_box, query)
            time.sleep(random.uniform(1, 3))
            search_box.send_keys(Keys.RETURN)
            time.sleep(random.uniform(3, 6))  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

            soup = BeautifulSoup(driver.page_source, "html.parser")
            driver.quit()

            for product in soup.find_all("div", class_="product-card")[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 10 —Ç–æ–≤–∞—Ä–æ–≤
                try:
                    title = product.find("span", class_="goods-name").text.strip()
                    price = int(product.find("span", class_="price-value").text.strip().replace(" ", "").replace("‚ÇΩ", ""))
                    discount = random.randint(10, 70)  # –≠–º—É–ª—è—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ —Å–∫–∏–¥–∫–∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
                    link = url

                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–æ–≤–∞—Ä –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
                    if title in product_database:
                        old_price = product_database[title]["price"]
                        if price < old_price * 0.8:  # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ 20% –∏–ª–∏ –±–æ–ª—å—à–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                            bot.send_message(chat_id, f"üìâ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {title}!
–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price}‚ÇΩ
–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price}‚ÇΩ
üîó {link}")

                    # –ï—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –±–æ–ª—å—à–µ 50%, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å—Ä–∞–∑—É
                    if discount >= 50:
                        bot.send_message(chat_id, f"üî• {title} —Å–æ —Å–∫–∏–¥–∫–æ–π {discount}%!
–¶–µ–Ω–∞: {price}‚ÇΩ
üîó {link}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
                    product_database[title] = {"price": price, "marketplace": marketplace, "link": link}

                except:
                    continue

        except Exception as e:
            continue

    return "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç."

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üõí –ü–æ–∏—Å–∫ —Å–∫–∏–¥–æ–∫"), KeyboardButton("üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ –∫–µ—à–±—ç–∫"))
    markup.add(KeyboardButton("ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω (–ò–ò)"), KeyboardButton("üîÑ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º"))
    markup.add(KeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ-—Ä–µ–∂–∏–º"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω (–ò–ò –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
@bot.message_handler(func=lambda message: message.text == "ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω (–ò–ò)")
def ask_product_for_monitoring(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PlayStation 5).")
    bot.register_next_step_handler(message, start_monitoring)

def start_monitoring(message):
    bot.send_message(message.chat.id, "üîç –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö...")
    result = monitor_prices(message.text, message.chat.id)
    bot.send_message(message.chat.id, result)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
